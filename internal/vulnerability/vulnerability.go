package vulnerability

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"sort"
	"strconv"
	"time"

	"gheprivate.intra.corp/vss/cots-management/internal/constants"
)

type Vulnerabilities []struct {
	VulnID      string    `json:"vulnId"`
	Source      string    `json:"source"`
	Description string    `json:"description"`
	References  string    `json:"references"`
	Published   time.Time `json:"published"`
	Updated     time.Time `json:"updated"`
	Cwes        []struct {
		CweID int    `json:"cweId"`
		Name  string `json:"name"`
	} `json:"cwes,omitempty"`
	CvssV3BaseScore              float64 `json:"cvssV3BaseScore"`
	CvssV3ImpactSubScore         float64 `json:"cvssV3ImpactSubScore"`
	CvssV3ExploitabilitySubScore float64 `json:"cvssV3ExploitabilitySubScore"`
	CvssV3Vector                 string  `json:"cvssV3Vector"`
	Severity                     string  `json:"severity"`
	EpssScore                    float64 `json:"epssScore"`
	EpssPercentile               float64 `json:"epssPercentile"`
	UUID                         string  `json:"uuid"`
	Aliases                      []any   `json:"aliases"`
	AffectedProjectCount         int     `json:"affectedProjectCount"`
	Cwe                          struct {
		CweID int    `json:"cweId"`
		Name  string `json:"name"`
	} `json:"cwe,omitempty"`
}

func GetVulnerabilities(flags constants.Flags, from string, uuid string, page int) Vulnerabilities {
	pageS := fmt.Sprint(page)
	url := flags.Uri + "/api/v1/vulnerability/" +
		from + "/" + uuid +
		"?suppressed=" + strconv.FormatBool(flags.IS) +
		"&pageNumber=" + pageS + "&pageSize=100"

	req, err := http.NewRequest(
		http.MethodGet,
		url,
		nil,
	)
	if err != nil {
		log.Fatalf("error creating HTTP request: %v", err)
	}

	req.Header.Add("Accept", "application/json")
	req.Header.Add("X-Api-Key", flags.ApiKey)

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatalf("error sending HTTP request: %v", err)
	}

	responseBytes, err := io.ReadAll(res.Body)
	if err != nil {
		log.Fatalf("error reading HTTP response body: %v", err)
	}

	vulnerabilities := Vulnerabilities{}
	json.Unmarshal(responseBytes, &vulnerabilities)

	return vulnerabilities
}

func GetAllVulnerabilities(flags constants.Flags, from string, uuid string) Vulnerabilities {
	page := 1
	pageSize := 100
	vulnerabilities := Vulnerabilities{}
	hasMore := true

	for hasMore {
		pageS := fmt.Sprint(page)
		url := flags.Uri + "/api/v1/vulnerability/" +
			from + "/" + uuid +
			"?suppressed=" + strconv.FormatBool(flags.IS) +
			"&pageNumber=" + pageS + "&pageSize=" + fmt.Sprintf("%d", pageSize)
		req, err := http.NewRequest(
			http.MethodGet,
			url,
			nil,
		)
		if err != nil {
			log.Fatalf("error creating HTTP request: %v", err)
		}

		req.Header.Add("Accept", "application/json")
		req.Header.Add("X-Api-Key", flags.ApiKey)

		res, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Fatalf("error sending HTTP request: %v", err)
		}

		responseBytes, err := io.ReadAll(res.Body)
		if err != nil {
			log.Fatalf("error reading HTTP response body: %v", err)
		}

		vuls := Vulnerabilities{}
		json.Unmarshal(responseBytes, &vuls)
		vulnerabilities = append(vulnerabilities, vuls...)

		log.Println(url, len(vuls))

		if len(vuls) < 100 {
			hasMore = false
			break
		}
		page++
	}

	return vulnerabilities
}

func (vulnerabilities Vulnerabilities) ListVulnerabilities() {
	sort.Slice(vulnerabilities, func(i, j int) bool {
		return vulnerabilities[i].VulnID < vulnerabilities[j].VulnID
	})

	for _, vulnerability := range vulnerabilities {
		log.Printf("%-25s %s\n", vulnerability.VulnID, vulnerability.UUID)
	}
}
